using BenchmarkDotNet.Attributes;
using Microsoft.Diagnostics.Tracing.Parsers.Kernel;
using System.Reflection;

namespace AdventOfCSharp.Benchmarking;

// Nullability is guaranteed given that the system operates as intended
#nullable disable

[MemoryDiagnoser]
public abstract class BaseAutogeneratedProblemBenchmark<T> : BaseAutogeneratedProblemBenchmark
    where T : Problem, new()
{
    protected sealed override Problem InitializeInstance() => new T();
}
[MemoryDiagnoser]
public abstract class BaseAutogeneratedProblemBenchmark
{
    private Problem instance;
    private Action solverPart1, solverPart2, loader;

    protected abstract Problem InitializeInstance();

    [GlobalSetup]
    public void Setup()
    {
        instance = InitializeInstance();
        solverPart1 = GetSolverDelegate(1);
        solverPart2 = GetSolverDelegate(2);
        loader = ProblemSolverMethodProvider.CreateLoadStateDelegate(instance);
        instance.EnsureLoadedState();

        Action GetSolverDelegate(int part)
        {
            return ProblemSolverMethodProvider.CreateSolverDelegate(part, instance);
        }
    }

    [Benchmark]
    public void Input()
    {
        loader();
    }
    [Benchmark]
    public void Part1()
    {
        solverPart1();
    }
    [Benchmark]
    public void Part2()
    {
        solverPart2();
    }
}

[MemoryDiagnoser]
public class ProblemBenchmark
{
    public int Year { get; set; }
    public int Day { get; set; }

    private ProblemRunner runner;
    private Action solverPart1, solverPart2, loader;

    public ProblemBenchmark() { }

    [GlobalSetup]
    public void Setup()
    {
        var problemInfo = ProblemsIndex.Instance[Year, Day];

        Console.WriteLine($"{Year}/{Day}");
        Console.WriteLine(problemInfo.ProblemType);
        var instance = problemInfo.InitializeInstance();
        runner = new ProblemRunner(instance);
        solverPart1 = ProblemSolverMethodProvider.CreateSolverDelegate(1, instance);
        solverPart2 = ProblemSolverMethodProvider.CreateSolverDelegate(2, instance);
        loader = ProblemSolverMethodProvider.CreateLoadStateDelegate(instance);
        runner.Problem.EnsureLoadedState();
    }

    [Benchmark]
    public void Input()
    {
        loader();
    }
    [Benchmark]
    public void Part1()
    {
        solverPart1();
    }
    [Benchmark]
    public void Part2()
    {
        solverPart2();
    }
}
